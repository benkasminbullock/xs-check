[% start_year=2017 %]
[% MACRO example(file) BLOCK %]
[%- pl =  file _ ".pl" -%]
[%- out = file _ "-out.txt" -%]
[% INCLUDE $pl | xtidy %]

produces output

[% INCLUDE $out | xtidy %]

(This example is included as L<F<[% pl %]>|https://api.metacpan.org/source/BKB/XS-Check-[% info.version %]/examples/[% pl %]> in the distribution.)
[% END %]
[% MACRO since(version) BLOCK -%]
This method was added in version [% version %] of the module.
[%- END %]
=encoding UTF-8

=head1 NAME

XS::Check - check XS for problems

=head1 SYNOPSIS

    use XS::Check;
    my $check = XS::Check->new ();
    $check->check_file ('some.xs');

=head1 VERSION

This documents version [% info.version %] of XS::Check corresponding to
L<git commit [% commit.commit %]|[% info.repo %]/commit/[%
commit.commit %]> released on [% commit.date %].

=head1 DESCRIPTION

Check XS files for errors.

=head1 METHODS

=head2 new

    my $check = XS::Check->new ();

=head2 check

    $check->check ($xs);

See L</SUGGESTIONS> for what this reports.

=head2 check_file

    $check->check ($xs_file);

Convenience method to read in $xs_file then run L</check> on it.

This assumes UTF-8 encoding of $xs_file.

=head1 SUGGESTIONS

This section details the possible suggestions made by the module and
the motivations behind them.

=head2 Use STRLEN in SvPV

Using an int type for the second argument to SvPV may cause errors on
64-bit Perls.

=head2 Use const char * for return value of SvPV

Be careful to not overwrite Perl's own buffer, which SvPV returns.

=head2 Don't use malloc/calloc/realloc/free

Replace with Newx etc. 

These cause "free to wrong pool" errors on multithreaded Windows
Perls.

=head2 Don't use the Perl_ prefix

Functions like C<Perl_croak> should not be used, just C<croak>.

=head1 LIMITATIONS

As of [% info.version %], the module has the following limitations.

=over

=item Error reporting

Errors are printed to standard error stream using C<warn>. There is no
way to alter this.

=item Struct members

The module is not very good at parsing struct members, so XS code like
the following doesn't get dealt with properly:

    s.txt = SvPV (sv, s.len);

=back

=head1 DEPENDENCIES

=over

=item L<C::Tokenize>

This supplies the regular expressions used to parse C by the module.

=item L<File::Slurper/read_text>

This is used by L</check_file>.

=item L<Text::LineNumber>

This is used to get the line numbers.

=item L<Carp>

=back

=head1 COMMAND-LINE TOOL

A command line tool called C<checkxs> is installed with the module. It
runs the L</check_file> method on each file named on the command line.

    checkxs Some.xs

As of [% info.version %], there are no options to the script. Its
output goes to standard error.

=head1 SEE ALSO

=over

=item L<Perl XS modules and CPAN testers|https://www.lemoda.net/perl/perl-xs-cpan-testers/index.html>

A collection of more or less obscure bugs found by CPAN testers, the
original inspiration for this module.

=back

[% INCLUDE "author" %]
