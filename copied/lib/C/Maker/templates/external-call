#ifndef ERROR_HANDLER

#include <stdio.h>
#include <stdarg.h>

static void default_error_handler (const char * file, int line,
                                   const char * format, ...)
{
    va_list a;
    va_start (a, format);
    fprintf (stderr, "%s:%d ", file, line);
    vfprintf (stderr, format, a);
    fprintf (stderr, "\n");
    va_end (a);
}
#define ERROR_HANDLER default_error_handler
#endif /* ERROR_HANDLER */
#define [% call %](x) {                                                 \
    [% name_space %]_status_t status;                                   \
    status = [% name_space %]_ ## x;                                    \
    if (status != [% name_space %]_status_ok) {                         \
    /* Print error and return. */                                       \
    ERROR_HANDLER (__FILE__, __LINE__,                                  \
                   "Call to %s failed: %s",                             \
                   #x, [% name_space %]_statuses[status]);              \
    return [% uc_ns %]_USER_ERROR;					\
    }                                                                   \
    }

/*
  Local variables:
  mode: c
  End: 
*/
